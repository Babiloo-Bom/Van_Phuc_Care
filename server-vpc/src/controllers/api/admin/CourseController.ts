import { sendError, sendSuccess } from '@libs/response';
import { Request, Response } from 'express';
import mongoose from 'mongoose';
import CourseModulesModel from '@mongodb/course-modules';

// Course schema for E-Learning
const courseSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  slug: {
    type: String,
    required: true,
    unique: true
  },
  description: {
    type: String,
    required: true
  },
  shortDescription: {
    type: String,
    required: true
  },
  thumbnail: {
    type: String,
    required: true
  },
  price: {
    type: Number,
    required: true,
    default: 0
  },
  originalPrice: {
    type: Number,
    default: 0
  },
  discount: {
    type: Number,
    default: 0
  },
  instructor: {
    name: {
      type: String,
      required: true
    },
    avatar: {
      type: String,
      default: ''
    },
    bio: {
      type: String,
      default: ''
    }
  },
  category: {
    type: String,
    required: true
  },
  level: {
    type: String,
    enum: ['beginner', 'intermediate', 'advanced'],
    default: 'beginner'
  },
  duration: {
    type: Number, // in minutes
    default: 0
  },
  lessons: {
    type: Number,
    default: 0
  },
  students: {
    type: Number,
    default: 0
  },
  rating: {
    average: {
      type: Number,
      default: 0
    },
    count: {
      type: Number,
      default: 0
    }
  },
  tags: [{
    type: String
  }],
  isPublished: {
    type: Boolean,
    default: true
  },
  isFeatured: {
    type: Boolean,
    default: false
  },
  status: {
    type: String,
    enum: ['active', 'inactive', 'draft'],
    default: 'active'
  }
}, {
  timestamps: true
});

// Create model if it doesn't exist
const Course = mongoose.models.Course || mongoose.model('Course', courseSchema);

class CourseController {
  /**
   * Get all courses
   */
  public static async getAllCourses(req: Request, res: Response) {
    try {
      const courses = await Course.find({ status: 'active' }).sort({ createdAt: -1 });
      console.log(`üìö Found ${courses.length} courses`);
      sendSuccess(res, { courses });
    } catch (error: any) {
      console.error('‚ùå Get courses error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Get course by slug
   */
  public static async getCourseBySlug(req: Request, res: Response) {
    try {
      const { slug } = req.params;
      const course = await Course.findOne({ slug, status: 'active' });
      
      if (!course) {
        return sendError(res, 404, 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i');
      }
      
      console.log(`üìñ Found course: ${course.title}`);
      sendSuccess(res, { course });
    } catch (error: any) {
      console.error('‚ùå Get course error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Get course by ID
   */
  public static async getCourseById(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const course = await Course.findById(id);
      
      if (!course) {
        return sendError(res, 404, 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i');
      }
      
      console.log(`üìñ Found course by ID: ${course.title}`);
      sendSuccess(res, { course });
    } catch (error: any) {
      console.error('‚ùå Get course by ID error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Create new course
   */
  public static async createCourse(req: Request, res: Response) {
    try {
      const courseData = req.body;
      
      // Check if course with same slug exists
      const existingCourse = await Course.findOne({ slug: courseData.slug });
      if (existingCourse) {
        return sendError(res, 400, 'Kh√≥a h·ªçc v·ªõi slug n√†y ƒë√£ t·ªìn t·∫°i');
      }
      
      const course = await Course.create(courseData);
      console.log(`‚úÖ Created course: ${course.title}`);
      let modules = [];
      if (Array.isArray(req.body.modules)) {
        for (const [idx, mod] of req.body.modules.entries()) {
          const newModule = await CourseModulesModel.model.create({
            courseId: course._id,
            title: mod.title,
            description: mod.description || '',
            index: typeof mod.index === 'number' ? mod.index : idx,
            status: mod.status || 'active'
          });
          modules.push(newModule);
        }
      }
      if (modules.length > 0)
        sendSuccess(res, { course, modules });
      else
        sendSuccess(res, { course });
    } catch (error: any) {
      console.error('‚ùå Create course error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Update course
   */
  public static async updateCourse(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const updateData = req.body;
      
      const course = await Course.findByIdAndUpdate(id, updateData, { new: true });
      if (!course) {
        return sendError(res, 404, 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i');
      }

      let modules = [];
      if (Array.isArray(req.body.modules)) {
        for (const [idx, mod] of req.body.modules.entries()) {
          if (mod._id) {
            // Update existing module
            const updated = await CourseModulesModel.model.findByIdAndUpdate(mod._id, {
              title: mod.title,
              description: mod.description || '',
              index: typeof mod.index === 'number' ? mod.index : idx,
              status: mod.status || 'active'
            }, { new: true });
            if (updated) modules.push(updated);
          } else {
            // Create new module
            const newModule = await CourseModulesModel.model.create({
              courseId: course._id,
              title: mod.title,
              description: mod.description || '',
              index: typeof mod.index === 'number' ? mod.index : idx,
              status: mod.status || 'active'
            });
            modules.push(newModule);
          }
        }
      }

      if (modules.length > 0)
        sendSuccess(res, { course, modules });
      else
        sendSuccess(res, { course });
    } catch (error: any) {
      console.error('‚ùå Update course error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Update course chapters
   */
  public static async updateCourseChapters(req: Request, res: Response) {
    try {
      console.log('üîç updateCourseChapters called');
      console.log('üìù Request params:', req.params);
      console.log('üìù Request body:', req.body);
      
      const { slug } = req.params;
      const { chapters } = req.body;
      
      console.log('üîç Looking for course with slug:', slug);
      
      const course = await Course.findOneAndUpdate(
        { slug },
        { chapters },
        { new: true }
      );
      
      if (!course) {
        console.log('‚ùå Course not found with slug:', slug);
        return sendError(res, 404, 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i');
      }
      
      console.log(`‚úÖ Updated course chapters: ${course.title}`);
      console.log('üìö Chapters count:', course.chapters?.length || 0);
      sendSuccess(res, { course });
    } catch (error: any) {
      console.error('‚ùå Update course chapters error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Delete course
   */
  public static async deleteCourse(req: Request, res: Response) {
    try {
      const { id } = req.params;
      
      const course = await Course.findByIdAndDelete(id);
      if (!course) {
        return sendError(res, 404, 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i');
      }
      
      console.log(`‚úÖ Deleted course: ${course.title}`);
      sendSuccess(res, { message: 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a' });
    } catch (error: any) {
      console.error('‚ùå Delete course error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Seed sample courses
   */
  public static async seedCourses(req: Request, res: Response) {
    try {
      const sampleCourses = [
        {
          title: "L·∫≠p Tr√¨nh Web Frontend v·ªõi React.js",
          slug: "lap-trinh-web-frontend-voi-reactjs",
          description: "Kh√≥a h·ªçc to√†n di·ªán v·ªÅ l·∫≠p tr√¨nh web frontend s·ª≠ d·ª•ng React.js, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. B·∫°n s·∫Ω h·ªçc ƒë∆∞·ª£c c√°ch x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i, t∆∞∆°ng t√°c v√† responsive.",
          shortDescription: "H·ªçc React.js t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, x√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i",
          thumbnail: "/images/courses/react-course.jpg",
          price: 299000,
          originalPrice: 599000,
          discount: 50,
          instructor: {
            name: "Nguy·ªÖn VƒÉn A",
            avatar: "/images/instructors/instructor-1.jpg",
            bio: "Senior Frontend Developer v·ªõi 5+ nƒÉm kinh nghi·ªám"
          },
          category: "L·∫≠p Tr√¨nh",
          level: "beginner",
          duration: 1200,
          lessons: 45,
          students: 1250,
          rating: {
            average: 4.8,
            count: 320
          },
          tags: ["React", "JavaScript", "Frontend", "Web Development"],
          chapters: [
            {
              title: "Gi·ªõi thi·ªáu React.js",
              description: "T√¨m hi·ªÉu v·ªÅ React.js v√† c√°ch thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ph√°t tri·ªÉn",
              lessons: [
                {
                  title: "React.js l√† g√¨?",
                  duration: 15,
                  type: "video",
                  videoUrl: "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4",
                  thumbnail: "https://via.placeholder.com/1280x720/4F46E5/FFFFFF?text=React+Introduction",
                  fileSize: 1048576,
                  quality: "720"
                },
                {
                  title: "C√†i ƒë·∫∑t Node.js v√† npm",
                  duration: 10,
                  type: "video",
                  videoUrl: "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_2mb.mp4",
                  thumbnail: "https://via.placeholder.com/1280x720/059669/FFFFFF?text=Node.js+Setup",
                  fileSize: 2097152,
                  quality: "720"
                }
              ]
            },
            {
              title: "Components v√† JSX",
              description: "H·ªçc c√°ch t·∫°o v√† s·ª≠ d·ª•ng React components",
              lessons: [
                {
                  title: "T·∫°o Component ƒë·∫ßu ti√™n",
                  duration: 20,
                  type: "video",
                  videoUrl: "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4",
                  thumbnail: "https://via.placeholder.com/1280x720/DC2626/FFFFFF?text=First+Component",
                  fileSize: 1048576,
                  quality: "720"
                }
              ]
            }
          ],
          isPublished: true,
          isFeatured: true,
          status: "active"
        },
        {
          title: "Thi·∫øt K·∫ø UI/UX v·ªõi Figma",
          slug: "thiet-ke-ui-ux-voi-figma",
          description: "Kh√≥a h·ªçc thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng chuy√™n nghi·ªáp v·ªõi Figma. T·ª´ wireframe ƒë·∫øn prototype ho√†n ch·ªânh.",
          shortDescription: "H·ªçc thi·∫øt k·∫ø UI/UX chuy√™n nghi·ªáp v·ªõi Figma",
          thumbnail: "/images/courses/figma-course.jpg",
          price: 199000,
          originalPrice: 399000,
          discount: 50,
          instructor: {
            name: "Tr·∫ßn Th·ªã B",
            avatar: "/images/instructors/instructor-2.jpg",
            bio: "UI/UX Designer v·ªõi 6+ nƒÉm kinh nghi·ªám t·∫°i c√°c c√¥ng ty l·ªõn"
          },
          category: "Thi·∫øt K·∫ø",
          level: "beginner",
          duration: 900,
          lessons: 32,
          students: 890,
          rating: {
            average: 4.7,
            count: 156
          },
          tags: ["Figma", "UI Design", "UX Design", "Prototype"],
          isPublished: true,
          isFeatured: true,
          status: "active"
        },
        {
          title: "Ph√¢n T√≠ch D·ªØ Li·ªáu v·ªõi Python",
          slug: "phan-tich-du-lieu-voi-python",
          description: "Kh√≥a h·ªçc ph√¢n t√≠ch d·ªØ li·ªáu v√† machine learning v·ªõi Python. S·ª≠ d·ª•ng pandas, numpy, matplotlib v√† scikit-learn ƒë·ªÉ x·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø.",
          shortDescription: "H·ªçc ph√¢n t√≠ch d·ªØ li·ªáu v√† ML v·ªõi Python",
          thumbnail: "/images/courses/python-course.jpg",
          price: 399000,
          originalPrice: 799000,
          discount: 50,
          instructor: {
            name: "L√™ VƒÉn C",
            avatar: "/images/instructors/instructor-3.jpg",
            bio: "Data Scientist v·ªõi 7+ nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c AI/ML"
          },
          category: "Khoa H·ªçc D·ªØ Li·ªáu",
          level: "intermediate",
          duration: 1500,
          lessons: 58,
          students: 2100,
          rating: {
            average: 4.9,
            count: 445
          },
          tags: ["Python", "Data Analysis", "Machine Learning", "Pandas", "NumPy"],
          chapters: [
            {
              title: "Python c∆° b·∫£n",
              description: "H·ªçc c√°c kh√°i ni·ªám c∆° b·∫£n c·ªßa Python",
              lessons: [
                {
                  title: "Gi·ªõi thi·ªáu Python",
                  duration: 20,
                  type: "video",
                  videoUrl: "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4",
                  thumbnail: "https://via.placeholder.com/1280x720/4F46E5/FFFFFF?text=Python+Introduction",
                  fileSize: 1048576,
                  quality: "720"
                },
                {
                  title: "Bi·∫øn v√† Ki·ªÉu d·ªØ li·ªáu",
                  duration: 25,
                  type: "video",
                  videoUrl: "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_2mb.mp4",
                  thumbnail: "https://via.placeholder.com/1280x720/059669/FFFFFF?text=Variables+Types",
                  fileSize: 2097152,
                  quality: "720"
                },
                {
                  title: "C·∫•u tr√∫c ƒëi·ªÅu khi·ªÉn",
                  duration: 30,
                  type: "video",
                  videoUrl: "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4",
                  thumbnail: "https://via.placeholder.com/1280x720/DC2626/FFFFFF?text=Control+Structures",
                  fileSize: 1048576,
                  quality: "720"
                }
              ]
            },
            {
              title: "Pandas v√† NumPy",
              description: "Th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu quan tr·ªçng",
              lessons: [
                {
                  title: "Gi·ªõi thi·ªáu Pandas",
                  duration: 35,
                  type: "video",
                  videoUrl: "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_2mb.mp4",
                  thumbnail: "https://via.placeholder.com/1280x720/7C3AED/FFFFFF?text=Pandas+Introduction",
                  fileSize: 2097152,
                  quality: "720"
                }
              ]
            }
          ],
          isPublished: true,
          isFeatured: false,
          status: "active"
        },
        {
          title: "Marketing Digital To√†n Di·ªán",
          slug: "marketing-digital-toan-dien",
          description: "Kh√≥a h·ªçc marketing digital t·ª´ A-Z, bao g·ªìm SEO, Google Ads, Facebook Ads, Content Marketing v√† Email Marketing. Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† mu·ªën n√¢ng cao k·ªπ nƒÉng.",
          shortDescription: "H·ªçc marketing digital t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao",
          thumbnail: "/images/courses/marketing-course.jpg",
          price: 249000,
          originalPrice: 499000,
          discount: 50,
          instructor: {
            name: "Ph·∫°m Th·ªã D",
            avatar: "/images/instructors/instructor-4.jpg",
            bio: "Digital Marketing Manager v·ªõi 8+ nƒÉm kinh nghi·ªám"
          },
          category: "Marketing",
          level: "beginner",
          duration: 1800,
          lessons: 67,
          students: 3200,
          rating: {
            average: 4.6,
            count: 678
          },
          tags: ["Digital Marketing", "SEO", "Google Ads", "Facebook Ads", "Content Marketing"],
          isPublished: true,
          isFeatured: true,
          status: "active"
        }
      ];

      // Clear existing courses first
      await Course.deleteMany({});
      console.log('üóëÔ∏è Cleared existing courses');

      // Insert sample courses
      const courses = await Course.insertMany(sampleCourses);
      console.log(`‚úÖ Inserted ${courses.length} sample courses`);

      sendSuccess(res, { 
        message: `ƒê√£ th√™m ${courses.length} kh√≥a h·ªçc m·∫´u`,
        courses: courses.map(course => ({
          id: course._id,
          title: course.title,
          price: course.price
        }))
      });
    } catch (error: any) {
      console.error('‚ùå Seed courses error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }
}

export default CourseController;