import { Request, Response } from 'express';
import mongoose from 'mongoose';
import { sendSuccess, sendError } from '../../../libs/response';

// Review schema
const reviewSchema = new mongoose.Schema({
  courseId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Course',
    required: true
  },
  userId: {
    type: String,
    required: true
  },
  userName: {
    type: String,
    required: true
  },
  userAvatar: {
    type: String,
    default: '/images/avatar-demo.png'
  },
  rating: {
    type: Number,
    required: true,
    min: 1,
    max: 5
  },
  content: {
    type: String,
    required: true
  },
  isVerified: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

const Review = mongoose.models.Review || mongoose.model('Review', reviewSchema);

class ReviewController {
  /**
   * Get reviews by course ID
   */
  public static async getReviewsByCourse(req: Request, res: Response) {
    try {
      const { courseId } = req.params;
      
      const reviews = await Review.find({ courseId })
        .sort({ createdAt: -1 })
        .limit(20);
      
      console.log(`üìù Found ${reviews.length} reviews for course: ${courseId}`);
      sendSuccess(res, { reviews });
    } catch (error: any) {
      console.error('‚ùå Get reviews error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Create a new review
   */
  public static async createReview(req: Request, res: Response) {
    try {
      const { courseId, userId, userName, userAvatar, rating, content } = req.body;
      
      const review = new Review({
        courseId,
        userId,
        userName,
        userAvatar,
        rating,
        content,
        isVerified: true
      });
      
      await review.save();
      
      console.log(`‚úÖ Created review for course: ${courseId}`);
      sendSuccess(res, { review });
    } catch (error: any) {
      console.error('‚ùå Create review error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }

  /**
   * Seed sample reviews
   */
  public static async seedReviews(req: Request, res: Response) {
    try {
      // Sample reviews data
      const sampleReviews = [
        {
          courseId: '68fdb92c7bdc0381df30533a', // Python course ID
          userId: 'user1',
          userName: 'Nguy·ªÖn VƒÉn A',
          userAvatar: '/images/avatar-demo.png',
          rating: 5,
          content: 'Kh√≥a h·ªçc r·∫•t hay v√† chi ti·∫øt! Gi·∫£ng vi√™n gi·∫£i th√≠ch r·∫•t d·ªÖ hi·ªÉu. T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c r·∫•t nhi·ªÅu ki·∫øn th·ª©c b·ªï √≠ch v·ªÅ Python v√† Data Science.',
          isVerified: true
        },
        {
          courseId: '68fdb92c7bdc0381df30533a',
          userId: 'user2',
          userName: 'Tr·∫ßn Th·ªã B',
          userAvatar: '/images/avatar-demo.png',
          rating: 5,
          content: 'N·ªôi dung kh√≥a h·ªçc r·∫•t th·ª±c t·∫ø v√† ·ª©ng d·ª•ng cao. C√°c b√†i t·∫≠p v√† d·ª± √°n gi√∫p t√¥i hi·ªÉu s√¢u h∆°n v·ªÅ machine learning.',
          isVerified: true
        },
        {
          courseId: '68fdb92c7bdc0381df30533a',
          userId: 'user3',
          userName: 'L√™ VƒÉn C',
          userAvatar: '/images/avatar-demo.png',
          rating: 4,
          content: 'Kh√≥a h·ªçc t·ªët, nh∆∞ng m·ªôt s·ªë ph·∫ßn h∆°i kh√≥ hi·ªÉu. C·∫ßn th√™m v√≠ d·ª• th·ª±c t·∫ø ƒë·ªÉ d·ªÖ ti·∫øp thu h∆°n.',
          isVerified: true
        },
        {
          courseId: '68fdb92c7bdc0381df30533a',
          userId: 'user4',
          userName: 'Ph·∫°m Th·ªã D',
          userAvatar: '/images/avatar-demo.png',
          rating: 5,
          content: 'Tuy·ªát v·ªùi! T√¥i ƒë√£ √°p d·ª•ng ki·∫øn th·ª©c t·ª´ kh√≥a h·ªçc v√†o c√¥ng vi·ªác v√† ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ t·ªët. C·∫£m ∆°n th·∫ßy!',
          isVerified: true
        },
        {
          courseId: '68fdb92c7bdc0381df30533a',
          userId: 'user5',
          userName: 'Ho√†ng VƒÉn E',
          userAvatar: '/images/avatar-demo.png',
          rating: 5,
          content: 'Kh√≥a h·ªçc r·∫•t ƒë√°ng gi√°! N·ªôi dung ƒë∆∞·ª£c c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n v√† ph√π h·ª£p v·ªõi xu h∆∞·ªõng hi·ªán t·∫°i.',
          isVerified: true
        }
      ];

      // Clear existing reviews for this course
      await Review.deleteMany({ courseId: '68fdb92c7bdc0381df30533a' });
      
      // Insert sample reviews
      const reviews = await Review.insertMany(sampleReviews);
      
      console.log(`‚úÖ Seeded ${reviews.length} reviews`);
      sendSuccess(res, { reviews });
    } catch (error: any) {
      console.error('‚ùå Seed reviews error:', error);
      sendError(res, 500, error.message, error as Error);
    }
  }
}

export default ReviewController;
