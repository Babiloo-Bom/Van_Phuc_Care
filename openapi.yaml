openapi: 3.0.3
info:
  title: Van Phuc Care API
  description: |
    API Documentation for Van Phuc Care Healthcare Management System
    
    ## Authentication
    Most endpoints require JWT authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer {your_access_token}
    ```
    
    ## Base URL
    - Development: `http://localhost:3000/api`
    - Production: `https://api.vanphuccare.com/api`
  version: 1.0.0
  contact:
    name: Van Phuc Care Support
    email: support@vanphuccare.com
  license:
    name: Proprietary

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.vanphuccare.com/api
    description: Production server

tags:
  - name: Admin - Authentication
    description: Admin authentication endpoints
  - name: Admin - FAQs
    description: FAQ management (Admin)
  - name: Admin - Feedbacks
    description: Feedback management (Admin)
  - name: Admin - Categories
    description: Category management (Admin)
  - name: Admin - Courses
    description: Course management (Admin)
  - name: Admin - Products
    description: Product management (Admin)
  - name: Admin - Product Collections
    description: Product collection management (Admin)
  - name: Admin - Product Reviews
    description: Product review management (Admin)
  - name: Admin - Customers
    description: Customer management (Admin)
  - name: Admin - Orders
    description: Order management (Admin)
  - name: Admin - Carts
    description: Cart management (Admin)
  - name: Admin - Users
    description: User management (Admin)
  - name: Admin - Access Permissions
    description: Access permission management (Admin)
  - name: Admin - Health Books
    description: Health book management (Admin)
  - name: Admin - Transactions
    description: Transaction management (Admin)
  - name: Admin - Schedule Vaccinations
    description: Schedule vaccination management (Admin)
  - name: User - Authentication
    description: User authentication endpoints
  - name: User - Cart
    description: User cart operations
  - name: User - Categories
    description: User category browsing
  - name: User - Courses
    description: User course browsing
  - name: User - FAQs
    description: User FAQ browsing
  - name: User - Feedbacks
    description: User feedback operations
  - name: User - Orders
    description: User order operations
  - name: User - Products
    description: User product browsing
  - name: Uploads
    description: File upload operations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token

  schemas:
    Error:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        errors:
          type: array
          items:
            type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10

    Admin:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        fullname:
          type: string
          example: "Admin User"
        email:
          type: string
          example: "admin@example.com"
        phone:
          type: string
          example: "0123456789"
        avatar:
          type: string
          example: "https://..."
        role:
          type: string
          example: "admin"
        permissions:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        fullname:
          type: string
          example: "Nguyễn Văn A"
        email:
          type: string
          example: "user@example.com"
        phoneNumber:
          type: string
          example: "0123456789"
        avatar:
          type: string
        gender:
          type: string
          example: "male"
        address:
          type: object
          properties:
            province:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
            district:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
            ward:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
            addressDetail:
              type: string
        status:
          type: string
          enum: [active, inactive, pending]
        type:
          type: string
          enum: [normal, vip]
        createdAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
        shortDescription:
          type: string
        thumbnail:
          type: string
        price:
          type: number
        priceDiscount:
          type: number
        discount:
          type: number
        typeDiscount:
          type: string
        category:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
        images:
          type: array
          items:
            type: string
        quantityInStock:
          type: integer
        quantitySelled:
          type: integer
        isOutOfStock:
          type: boolean
        showHome:
          type: boolean
        status:
          type: string
          enum: [active, archived, draft, out_stock]
        reviews:
          type: array
          items:
            type: object
        createdAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        _id:
          type: string
        code:
          type: integer
        cartId:
          type: string
        customer:
          type: object
          properties:
            _id:
              type: string
            fullname:
              type: string
            email:
              type: string
            phone:
              type: string
            address:
              type: string
            note:
              type: string
        products:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              thumbnail:
                type: string
              quantity:
                type: integer
              price:
                type: number
        status:
          type: string
        paymentMethod:
          type: string
        discount:
          type: object
        transport:
          type: object
        notes:
          type: string
        createdAt:
          type: string
          format: date-time

    FAQ:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        slug:
          type: string
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time

    Feedback:
      type: object
      properties:
        _id:
          type: string
        fullname:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        avatar:
          type: string
        position:
          type: string
        content:
          type: string
        createdBy:
          type: string
          enum: [admin, customer]
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        slug:
          type: string
        thumbnail:
          type: string
        type:
          type: string
          enum: [product, blog]
        postCount:
          type: integer
        status:
          type: string
        createdAt:
          type: string
          format: date-time

    Course:
      type: object
      properties:
        _id:
          type: string
        code:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [active, inactive]
        notes:
          type: string
        createdAt:
          type: string
          format: date-time

    HealthBook:
      type: object
      properties:
        _id:
          type: string
        customerId:
          type: string
        name:
          type: string
        dob:
          type: string
        avatar:
          type: string
        weight:
          type: string
        height:
          type: string
        gender:
          type: string
        healthCondition:
          type: string
        domain:
          type: string
        createdAt:
          type: string
          format: date-time

    Transaction:
      type: object
      properties:
        _id:
          type: string
        origin:
          type: string
        type:
          type: string
        title:
          type: string
        total:
          type: number
        status:
          type: string
          enum: [pending, success, denied, active, inactive]
        createdAt:
          type: string
          format: date-time

paths:
  # ADMIN ENDPOINTS
  /a/sessions/login:
    post:
      tags:
        - Admin - Authentication
      summary: Login Admin
      description: Authenticate admin user and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "admin@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      admin:
                        $ref: '#/components/schemas/Admin'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /a/sessions/current_admin:
    get:
      tags:
        - Admin - Authentication
      summary: Get Current Admin
      description: Get currently authenticated admin information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      admin:
                        $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /a/faqs:
    get:
      tags:
        - Admin - FAQs
      summary: Get All FAQs
      description: Retrieve list of all FAQs with pagination
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      faqs:
                        type: array
                        items:
                          $ref: '#/components/schemas/FAQ'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Admin - FAQs
      summary: Create FAQ
      description: Create a new FAQ entry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                  example: "Câu hỏi thường gặp"
                content:
                  type: string
                  example: "Nội dung câu trả lời..."
                slug:
                  type: string
                  example: "cau-hoi-thuong-gap"
      responses:
        '200':
          description: FAQ created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      faq:
                        $ref: '#/components/schemas/FAQ'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /a/faqs/{faqId}:
    get:
      tags:
        - Admin - FAQs
      summary: Get FAQ by ID
      security:
        - BearerAuth: []
      parameters:
        - name: faqId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      faq:
                        $ref: '#/components/schemas/FAQ'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      tags:
        - Admin - FAQs
      summary: Update FAQ
      security:
        - BearerAuth: []
      parameters:
        - name: faqId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                status:
                  type: string
                  enum: [active, inactive]
      responses:
        '200':
          description: FAQ updated successfully
        '404':
          description: FAQ not found
    
    delete:
      tags:
        - Admin - FAQs
      summary: Delete FAQ
      security:
        - BearerAuth: []
      parameters:
        - name: faqId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: FAQ deleted successfully
        '404':
          description: FAQ not found

  /a/products:
    get:
      tags:
        - Admin - Products
      summary: Get All Products
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
    
    post:
      tags:
        - Admin - Products
      summary: Create Product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
              properties:
                name:
                  type: string
                slug:
                  type: string
                thumbnail:
                  type: string
                shortDescription:
                  type: string
                price:
                  type: number
                priceDiscount:
                  type: number
                discount:
                  type: number
                category:
                  type: array
                  items:
                    type: object
                images:
                  type: array
                  items:
                    type: string
                quantityInStock:
                  type: integer
                showHome:
                  type: boolean
      responses:
        '200':
          description: Product created successfully

  /a/orders:
    get:
      tags:
        - Admin - Orders
      summary: Get All Orders
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
                      pagination:
                        $ref: '#/components/schemas/Pagination'

  # USER ENDPOINTS
  /u/sessions/login:
    post:
      tags:
        - User - Authentication
      summary: Login User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'

  /u/sessions:
    post:
      tags:
        - User - Authentication
      summary: Register User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullname
                - email
                - phoneNumber
                - password
              properties:
                fullname:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
                password:
                  type: string
                gender:
                  type: string
      responses:
        '200':
          description: Registration successful

  /u/products:
    get:
      tags:
        - User - Products
      summary: Get All Products (User)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: categoryId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'

  /u/cart:
    get:
      tags:
        - User - Cart
      summary: Get User Cart
      responses:
        '200':
          description: Success
    
    post:
      tags:
        - User - Cart
      summary: Create Cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Cart created

  /uploads:
    post:
      tags:
        - Uploads
      summary: Upload Files
      description: Upload files to Firebase storage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: object
                    properties:
                      urls:
                        type: array
                        items:
                          type: string

